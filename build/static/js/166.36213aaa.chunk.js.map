{"version":3,"file":"static/js/166.36213aaa.chunk.js","mappings":"mMACA,EAAuB,wB,kBCiBvB,EAhBkB,SAACA,GACjB,OACEC,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAaC,SAAA,EAC1BH,EAAAA,EAAAA,MAAA,UAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,cAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIJ,EAAMM,UAEZD,EAAAA,EAAAA,KAAA,cAAAD,SAAaJ,EAAMO,aAErBF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaV,EAAMW,IAAMT,UAAU,MAAKE,SAAC,sBAKvD,ECfA,EAAuB,wBAAvB,EAAyD,2BC6CzD,EAhCkB,SAACJ,GACjB,IAXkBY,EAAQC,EAWpBC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,MAERC,EAA0C,QAD5B,IAAIC,gBAAgBL,EAASM,QACjBC,IAAI,QAC9BC,GAhBYZ,EAgBcZ,EAAMY,OAhBZC,EAgBoBO,EAfvCR,EAAOa,MAAK,SAACC,EAAQC,GAC1B,OAAId,EACKa,EAAOf,GAAKgB,EAAOhB,GAAK,GAAK,EAE7Be,EAAOf,GAAKgB,EAAOhB,GAAK,GAAK,CAExC,KAcA,OACEV,EAAAA,EAAAA,MAAC2B,EAAAA,SAAQ,CAAAxB,SAAA,EACPC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAgBC,UAC9BH,EAAAA,EAAAA,MAAA,UAAQ4B,QANM,WAClBf,EAAQgB,KAAK,GAADpB,OAAIQ,EAAMa,KAAI,UAAArB,OAAUU,EAAc,OAAS,OAC7D,EAImChB,SAAA,CAAC,QACtBgB,EAAc,aAAe,kBAGvCf,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAaC,SACzBoB,EAAaQ,KAAI,SAACC,GAAK,OACtB5B,EAAAA,EAAAA,KAAC6B,EAAS,CAERvB,GAAIsB,EAAMtB,GACVJ,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMtB,GAIX,QAKZ,E,SC3CA,EAA2B,gCCa3B,EAZsB,WAEpB,OACEV,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBACHC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAG,cAAaP,UAAU,MAAKE,SAAC,kBAK5C,E,kBCuBA,EA5Be,SAAH+B,GAAkB,IAAbvB,EAAMuB,EAANvB,OACfwB,GAAqDC,EAAAA,EAAAA,GAAQC,EAAAA,IAAc,GAApEC,EAAWH,EAAXG,YAAaC,EAAMJ,EAANI,OAAaC,EAAWL,EAAhBM,KAAiBC,EAAKP,EAALO,MAM7C,OAJA/B,EAAO6B,IACPG,EAAAA,EAAAA,YAAU,WACRL,GACF,GAAE,CAACA,IACW,YAAXC,GAECnC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAUE,UACvBC,EAAAA,EAAAA,KAACwC,EAAAA,EAAc,MAIlBF,GAECtC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,iBAAgBE,SAAEuC,IAGrB,cAAXH,GAA4BC,GAAsC,IAAvBA,EAAYK,QAIxDzC,EAAAA,EAAAA,KAAA,WAAAD,UACEC,EAAAA,EAAAA,KAAC0C,EAAS,CAACnC,OAAQ6B,OAJdpC,EAAAA,EAAAA,KAAC2C,EAAa,CAAEC,QAAUR,EAAY9B,IAOjD,C","sources":["webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/Quotes.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__99Kx9\"};","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__crin-\",\"sorting\":\"QuoteList_sorting__chqTx\"};","import { Fragment } from \"react\";\nimport { useHistory, useLocation,useRouteMatch } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const match = useRouteMatch();\n  const queryParams = new URLSearchParams(location.search);\n  const isAscending = queryParams.get(\"sort\") === \"asc\";\n  const sortedQuotes = sortQuotes(props.quotes, isAscending);\n\n  const sortHandler = () => {\n    history.push(`${match.path}?sort=${(isAscending ? \"desc\" : \"asc\")}`);\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={sortHandler}>\n          Sort {isAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__cp7uk\"};","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom';\nconst NoQuotesFound = () => {\n \n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to='/new-quotes'className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React from \"react\";\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport useHttp from \"../hooks/use-http\";\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\nimport { useEffect } from \"react\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nconst Quotes = ({quotes}) => {\r\n  const {sendRequest, status, data:loadedQuote,error} =useHttp(getAllQuotes, true)\r\n\r\n  quotes(loadedQuote)\r\n  useEffect(()=>{\r\n    sendRequest()\r\n  },[sendRequest])\r\n  if(status === 'pending'){\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner/>\r\n      </div>\r\n    )\r\n  }\r\n  if(error){\r\n    return(\r\n      <p className=\"centered focus\">{error}</p>\r\n    )\r\n  }\r\n  if(status === 'completed' && (!loadedQuote || loadedQuote.length === 0)){\r\n    return <NoQuotesFound  quoteId ={loadedQuote.id}/>\r\n  }\r\n  return (\r\n    <section>\r\n      <QuoteList quotes={loadedQuote} />\r\n    </section>\r\n  );\r\n};\r\nexport default Quotes;\r\n"],"names":["props","_jsxs","className","classes","children","_jsx","text","author","Link","to","concat","id","quotes","ascending","history","useHistory","location","useLocation","match","useRouteMatch","isAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","push","path","map","quote","QuoteItem","_ref","_useHttp","useHttp","getAllQuotes","sendRequest","status","loadedQuote","data","error","useEffect","LoadingSpinner","length","QuoteList","NoQuotesFound","quoteId"],"sourceRoot":""}